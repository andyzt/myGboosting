// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_model_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTreeNodeImpl();
void InitDefaultsTreeNode();
void InitDefaultsTreeImpl();
void InitDefaultsTree();
void InitDefaultsHash_HashEntry_DoNotUseImpl();
void InitDefaultsHash_HashEntry_DoNotUse();
void InitDefaultsHashImpl();
void InitDefaultsHash();
void InitDefaultsSplitImpl();
void InitDefaultsSplit();
void InitDefaultsModelImpl();
void InitDefaultsModel();
inline void InitDefaults() {
  InitDefaultsTreeNode();
  InitDefaultsTree();
  InitDefaultsHash_HashEntry_DoNotUse();
  InitDefaultsHash();
  InitDefaultsSplit();
  InitDefaultsModel();
}
}  // namespace protobuf_model_2eproto
namespace proto_model {
class Hash;
class HashDefaultTypeInternal;
extern HashDefaultTypeInternal _Hash_default_instance_;
class Hash_HashEntry_DoNotUse;
class Hash_HashEntry_DoNotUseDefaultTypeInternal;
extern Hash_HashEntry_DoNotUseDefaultTypeInternal _Hash_HashEntry_DoNotUse_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class Split;
class SplitDefaultTypeInternal;
extern SplitDefaultTypeInternal _Split_default_instance_;
class Tree;
class TreeDefaultTypeInternal;
extern TreeDefaultTypeInternal _Tree_default_instance_;
class TreeNode;
class TreeNodeDefaultTypeInternal;
extern TreeNodeDefaultTypeInternal _TreeNode_default_instance_;
}  // namespace proto_model
namespace proto_model {

// ===================================================================

class TreeNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.TreeNode) */ {
 public:
  TreeNode();
  virtual ~TreeNode();

  TreeNode(const TreeNode& from);

  inline TreeNode& operator=(const TreeNode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TreeNode(TreeNode&& from) noexcept
    : TreeNode() {
    *this = ::std::move(from);
  }

  inline TreeNode& operator=(TreeNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TreeNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TreeNode* internal_default_instance() {
    return reinterpret_cast<const TreeNode*>(
               &_TreeNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TreeNode* other);
  friend void swap(TreeNode& a, TreeNode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TreeNode* New() const PROTOBUF_FINAL { return New(NULL); }

  TreeNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TreeNode& from);
  void MergeFrom(const TreeNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TreeNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FeatureId = 1;
  bool has_featureid() const;
  void clear_featureid();
  static const int kFeatureIdFieldNumber = 1;
  ::google::protobuf::int32 featureid() const;
  void set_featureid(::google::protobuf::int32 value);

  // required int32 Left = 2;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  ::google::protobuf::int32 left() const;
  void set_left(::google::protobuf::int32 value);

  // required int32 Right = 3;
  bool has_right() const;
  void clear_right();
  static const int kRightFieldNumber = 3;
  ::google::protobuf::int32 right() const;
  void set_right(::google::protobuf::int32 value);

  // required bool Leaf = 4;
  bool has_leaf() const;
  void clear_leaf();
  static const int kLeafFieldNumber = 4;
  bool leaf() const;
  void set_leaf(bool value);

  // required float Value = 5;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 5;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:proto_model.TreeNode)
 private:
  void set_has_featureid();
  void clear_has_featureid();
  void set_has_left();
  void clear_has_left();
  void set_has_right();
  void clear_has_right();
  void set_has_leaf();
  void clear_has_leaf();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 featureid_;
  ::google::protobuf::int32 left_;
  ::google::protobuf::int32 right_;
  bool leaf_;
  float value_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsTreeNodeImpl();
};
// -------------------------------------------------------------------

class Tree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.Tree) */ {
 public:
  Tree();
  virtual ~Tree();

  Tree(const Tree& from);

  inline Tree& operator=(const Tree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tree(Tree&& from) noexcept
    : Tree() {
    *this = ::std::move(from);
  }

  inline Tree& operator=(Tree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tree* internal_default_instance() {
    return reinterpret_cast<const Tree*>(
               &_Tree_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Tree* other);
  friend void swap(Tree& a, Tree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tree* New() const PROTOBUF_FINAL { return New(NULL); }

  Tree* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tree& from);
  void MergeFrom(const Tree& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_model.TreeNode node = 1;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::proto_model::TreeNode& node(int index) const;
  ::proto_model::TreeNode* mutable_node(int index);
  ::proto_model::TreeNode* add_node();
  ::google::protobuf::RepeatedPtrField< ::proto_model::TreeNode >*
      mutable_node();
  const ::google::protobuf::RepeatedPtrField< ::proto_model::TreeNode >&
      node() const;

  // @@protoc_insertion_point(class_scope:proto_model.Tree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto_model::TreeNode > node_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsTreeImpl();
};
// -------------------------------------------------------------------

class Hash_HashEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Hash_HashEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Hash_HashEntry_DoNotUse, 
    ::std::string, ::google::protobuf::int32,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
    0 > SuperType;
  Hash_HashEntry_DoNotUse();
  Hash_HashEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Hash_HashEntry_DoNotUse& other);
  static const Hash_HashEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Hash_HashEntry_DoNotUse*>(&_Hash_HashEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Hash : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.Hash) */ {
 public:
  Hash();
  virtual ~Hash();

  Hash(const Hash& from);

  inline Hash& operator=(const Hash& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hash(Hash&& from) noexcept
    : Hash() {
    *this = ::std::move(from);
  }

  inline Hash& operator=(Hash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hash* internal_default_instance() {
    return reinterpret_cast<const Hash*>(
               &_Hash_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Hash* other);
  friend void swap(Hash& a, Hash& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hash* New() const PROTOBUF_FINAL { return New(NULL); }

  Hash* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Hash& from);
  void MergeFrom(const Hash& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Hash* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, int32> hash = 1;
  int hash_size() const;
  void clear_hash();
  static const int kHashFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      hash() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_hash();

  // @@protoc_insertion_point(class_scope:proto_model.Hash)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::MapField<
      Hash_HashEntry_DoNotUse,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > hash_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsHashImpl();
};
// -------------------------------------------------------------------

class Split : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.Split) */ {
 public:
  Split();
  virtual ~Split();

  Split(const Split& from);

  inline Split& operator=(const Split& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Split(Split&& from) noexcept
    : Split() {
    *this = ::std::move(from);
  }

  inline Split& operator=(Split&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Split& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Split* internal_default_instance() {
    return reinterpret_cast<const Split*>(
               &_Split_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Split* other);
  friend void swap(Split& a, Split& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Split* New() const PROTOBUF_FINAL { return New(NULL); }

  Split* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Split& from);
  void MergeFrom(const Split& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Split* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float split_val = 1;
  int split_val_size() const;
  void clear_split_val();
  static const int kSplitValFieldNumber = 1;
  float split_val(int index) const;
  void set_split_val(int index, float value);
  void add_split_val(float value);
  const ::google::protobuf::RepeatedField< float >&
      split_val() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_split_val();

  // @@protoc_insertion_point(class_scope:proto_model.Split)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > split_val_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsSplitImpl();
};
// -------------------------------------------------------------------

class Model : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Model* other);
  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const PROTOBUF_FINAL { return New(NULL); }

  Model* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Model* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_model.Tree tree = 1;
  int tree_size() const;
  void clear_tree();
  static const int kTreeFieldNumber = 1;
  const ::proto_model::Tree& tree(int index) const;
  ::proto_model::Tree* mutable_tree(int index);
  ::proto_model::Tree* add_tree();
  ::google::protobuf::RepeatedPtrField< ::proto_model::Tree >*
      mutable_tree();
  const ::google::protobuf::RepeatedPtrField< ::proto_model::Tree >&
      tree() const;

  // repeated .proto_model.Hash hashes = 2;
  int hashes_size() const;
  void clear_hashes();
  static const int kHashesFieldNumber = 2;
  const ::proto_model::Hash& hashes(int index) const;
  ::proto_model::Hash* mutable_hashes(int index);
  ::proto_model::Hash* add_hashes();
  ::google::protobuf::RepeatedPtrField< ::proto_model::Hash >*
      mutable_hashes();
  const ::google::protobuf::RepeatedPtrField< ::proto_model::Hash >&
      hashes() const;

  // repeated .proto_model.Split splits = 3;
  int splits_size() const;
  void clear_splits();
  static const int kSplitsFieldNumber = 3;
  const ::proto_model::Split& splits(int index) const;
  ::proto_model::Split* mutable_splits(int index);
  ::proto_model::Split* add_splits();
  ::google::protobuf::RepeatedPtrField< ::proto_model::Split >*
      mutable_splits();
  const ::google::protobuf::RepeatedPtrField< ::proto_model::Split >&
      splits() const;

  // required float lr = 4;
  bool has_lr() const;
  void clear_lr();
  static const int kLrFieldNumber = 4;
  float lr() const;
  void set_lr(float value);

  // @@protoc_insertion_point(class_scope:proto_model.Model)
 private:
  void set_has_lr();
  void clear_has_lr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto_model::Tree > tree_;
  ::google::protobuf::RepeatedPtrField< ::proto_model::Hash > hashes_;
  ::google::protobuf::RepeatedPtrField< ::proto_model::Split > splits_;
  float lr_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsModelImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TreeNode

// required int32 FeatureId = 1;
inline bool TreeNode::has_featureid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TreeNode::set_has_featureid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TreeNode::clear_has_featureid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TreeNode::clear_featureid() {
  featureid_ = 0;
  clear_has_featureid();
}
inline ::google::protobuf::int32 TreeNode::featureid() const {
  // @@protoc_insertion_point(field_get:proto_model.TreeNode.FeatureId)
  return featureid_;
}
inline void TreeNode::set_featureid(::google::protobuf::int32 value) {
  set_has_featureid();
  featureid_ = value;
  // @@protoc_insertion_point(field_set:proto_model.TreeNode.FeatureId)
}

// required int32 Left = 2;
inline bool TreeNode::has_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TreeNode::set_has_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TreeNode::clear_has_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TreeNode::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline ::google::protobuf::int32 TreeNode::left() const {
  // @@protoc_insertion_point(field_get:proto_model.TreeNode.Left)
  return left_;
}
inline void TreeNode::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:proto_model.TreeNode.Left)
}

// required int32 Right = 3;
inline bool TreeNode::has_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TreeNode::set_has_right() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TreeNode::clear_has_right() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TreeNode::clear_right() {
  right_ = 0;
  clear_has_right();
}
inline ::google::protobuf::int32 TreeNode::right() const {
  // @@protoc_insertion_point(field_get:proto_model.TreeNode.Right)
  return right_;
}
inline void TreeNode::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:proto_model.TreeNode.Right)
}

// required bool Leaf = 4;
inline bool TreeNode::has_leaf() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TreeNode::set_has_leaf() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TreeNode::clear_has_leaf() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TreeNode::clear_leaf() {
  leaf_ = false;
  clear_has_leaf();
}
inline bool TreeNode::leaf() const {
  // @@protoc_insertion_point(field_get:proto_model.TreeNode.Leaf)
  return leaf_;
}
inline void TreeNode::set_leaf(bool value) {
  set_has_leaf();
  leaf_ = value;
  // @@protoc_insertion_point(field_set:proto_model.TreeNode.Leaf)
}

// required float Value = 5;
inline bool TreeNode::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TreeNode::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TreeNode::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TreeNode::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float TreeNode::value() const {
  // @@protoc_insertion_point(field_get:proto_model.TreeNode.Value)
  return value_;
}
inline void TreeNode::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto_model.TreeNode.Value)
}

// -------------------------------------------------------------------

// Tree

// repeated .proto_model.TreeNode node = 1;
inline int Tree::node_size() const {
  return node_.size();
}
inline void Tree::clear_node() {
  node_.Clear();
}
inline const ::proto_model::TreeNode& Tree::node(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Tree.node)
  return node_.Get(index);
}
inline ::proto_model::TreeNode* Tree::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:proto_model.Tree.node)
  return node_.Mutable(index);
}
inline ::proto_model::TreeNode* Tree::add_node() {
  // @@protoc_insertion_point(field_add:proto_model.Tree.node)
  return node_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto_model::TreeNode >*
Tree::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Tree.node)
  return &node_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_model::TreeNode >&
Tree::node() const {
  // @@protoc_insertion_point(field_list:proto_model.Tree.node)
  return node_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Hash

// map<string, int32> hash = 1;
inline int Hash::hash_size() const {
  return hash_.size();
}
inline void Hash::clear_hash() {
  hash_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
Hash::hash() const {
  // @@protoc_insertion_point(field_map:proto_model.Hash.hash)
  return hash_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
Hash::mutable_hash() {
  // @@protoc_insertion_point(field_mutable_map:proto_model.Hash.hash)
  return hash_.MutableMap();
}

// -------------------------------------------------------------------

// Split

// repeated float split_val = 1;
inline int Split::split_val_size() const {
  return split_val_.size();
}
inline void Split::clear_split_val() {
  split_val_.Clear();
}
inline float Split::split_val(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Split.split_val)
  return split_val_.Get(index);
}
inline void Split::set_split_val(int index, float value) {
  split_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_model.Split.split_val)
}
inline void Split::add_split_val(float value) {
  split_val_.Add(value);
  // @@protoc_insertion_point(field_add:proto_model.Split.split_val)
}
inline const ::google::protobuf::RepeatedField< float >&
Split::split_val() const {
  // @@protoc_insertion_point(field_list:proto_model.Split.split_val)
  return split_val_;
}
inline ::google::protobuf::RepeatedField< float >*
Split::mutable_split_val() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Split.split_val)
  return &split_val_;
}

// -------------------------------------------------------------------

// Model

// repeated .proto_model.Tree tree = 1;
inline int Model::tree_size() const {
  return tree_.size();
}
inline void Model::clear_tree() {
  tree_.Clear();
}
inline const ::proto_model::Tree& Model::tree(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Model.tree)
  return tree_.Get(index);
}
inline ::proto_model::Tree* Model::mutable_tree(int index) {
  // @@protoc_insertion_point(field_mutable:proto_model.Model.tree)
  return tree_.Mutable(index);
}
inline ::proto_model::Tree* Model::add_tree() {
  // @@protoc_insertion_point(field_add:proto_model.Model.tree)
  return tree_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto_model::Tree >*
Model::mutable_tree() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Model.tree)
  return &tree_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_model::Tree >&
Model::tree() const {
  // @@protoc_insertion_point(field_list:proto_model.Model.tree)
  return tree_;
}

// repeated .proto_model.Hash hashes = 2;
inline int Model::hashes_size() const {
  return hashes_.size();
}
inline void Model::clear_hashes() {
  hashes_.Clear();
}
inline const ::proto_model::Hash& Model::hashes(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Model.hashes)
  return hashes_.Get(index);
}
inline ::proto_model::Hash* Model::mutable_hashes(int index) {
  // @@protoc_insertion_point(field_mutable:proto_model.Model.hashes)
  return hashes_.Mutable(index);
}
inline ::proto_model::Hash* Model::add_hashes() {
  // @@protoc_insertion_point(field_add:proto_model.Model.hashes)
  return hashes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto_model::Hash >*
Model::mutable_hashes() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Model.hashes)
  return &hashes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_model::Hash >&
Model::hashes() const {
  // @@protoc_insertion_point(field_list:proto_model.Model.hashes)
  return hashes_;
}

// repeated .proto_model.Split splits = 3;
inline int Model::splits_size() const {
  return splits_.size();
}
inline void Model::clear_splits() {
  splits_.Clear();
}
inline const ::proto_model::Split& Model::splits(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Model.splits)
  return splits_.Get(index);
}
inline ::proto_model::Split* Model::mutable_splits(int index) {
  // @@protoc_insertion_point(field_mutable:proto_model.Model.splits)
  return splits_.Mutable(index);
}
inline ::proto_model::Split* Model::add_splits() {
  // @@protoc_insertion_point(field_add:proto_model.Model.splits)
  return splits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto_model::Split >*
Model::mutable_splits() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Model.splits)
  return &splits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_model::Split >&
Model::splits() const {
  // @@protoc_insertion_point(field_list:proto_model.Model.splits)
  return splits_;
}

// required float lr = 4;
inline bool Model::has_lr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Model::set_has_lr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Model::clear_has_lr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Model::clear_lr() {
  lr_ = 0;
  clear_has_lr();
}
inline float Model::lr() const {
  // @@protoc_insertion_point(field_get:proto_model.Model.lr)
  return lr_;
}
inline void Model::set_lr(float value) {
  set_has_lr();
  lr_ = value;
  // @@protoc_insertion_point(field_set:proto_model.Model.lr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_model

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
