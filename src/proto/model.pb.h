// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_model_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLeafValueImpl();
void InitDefaultsLeafValue();
void InitDefaultsSplitImpl();
void InitDefaultsSplit();
void InitDefaultsTreeImpl();
void InitDefaultsTree();
void InitDefaultsBoundImpl();
void InitDefaultsBound();
void InitDefaultsModelImpl();
void InitDefaultsModel();
inline void InitDefaults() {
  InitDefaultsLeafValue();
  InitDefaultsSplit();
  InitDefaultsTree();
  InitDefaultsBound();
  InitDefaultsModel();
}
}  // namespace protobuf_model_2eproto
namespace proto_model {
class Bound;
class BoundDefaultTypeInternal;
extern BoundDefaultTypeInternal _Bound_default_instance_;
class LeafValue;
class LeafValueDefaultTypeInternal;
extern LeafValueDefaultTypeInternal _LeafValue_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class Split;
class SplitDefaultTypeInternal;
extern SplitDefaultTypeInternal _Split_default_instance_;
class Tree;
class TreeDefaultTypeInternal;
extern TreeDefaultTypeInternal _Tree_default_instance_;
}  // namespace proto_model
namespace proto_model {

// ===================================================================

class LeafValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.LeafValue) */ {
 public:
  LeafValue();
  virtual ~LeafValue();

  LeafValue(const LeafValue& from);

  inline LeafValue& operator=(const LeafValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LeafValue(LeafValue&& from) noexcept
    : LeafValue() {
    *this = ::std::move(from);
  }

  inline LeafValue& operator=(LeafValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeafValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeafValue* internal_default_instance() {
    return reinterpret_cast<const LeafValue*>(
               &_LeafValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LeafValue* other);
  friend void swap(LeafValue& a, LeafValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LeafValue* New() const PROTOBUF_FINAL { return New(NULL); }

  LeafValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LeafValue& from);
  void MergeFrom(const LeafValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LeafValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float Value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:proto_model.LeafValue)
 private:
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float value_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsLeafValueImpl();
};
// -------------------------------------------------------------------

class Split : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.Split) */ {
 public:
  Split();
  virtual ~Split();

  Split(const Split& from);

  inline Split& operator=(const Split& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Split(Split&& from) noexcept
    : Split() {
    *this = ::std::move(from);
  }

  inline Split& operator=(Split&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Split& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Split* internal_default_instance() {
    return reinterpret_cast<const Split*>(
               &_Split_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Split* other);
  friend void swap(Split& a, Split& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Split* New() const PROTOBUF_FINAL { return New(NULL); }

  Split* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Split& from);
  void MergeFrom(const Split& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Split* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 feature_id = 1;
  bool has_feature_id() const;
  void clear_feature_id();
  static const int kFeatureIdFieldNumber = 1;
  ::google::protobuf::int32 feature_id() const;
  void set_feature_id(::google::protobuf::int32 value);

  // required int32 bin_id = 2;
  bool has_bin_id() const;
  void clear_bin_id();
  static const int kBinIdFieldNumber = 2;
  ::google::protobuf::int32 bin_id() const;
  void set_bin_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_model.Split)
 private:
  void set_has_feature_id();
  void clear_has_feature_id();
  void set_has_bin_id();
  void clear_has_bin_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 feature_id_;
  ::google::protobuf::int32 bin_id_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsSplitImpl();
};
// -------------------------------------------------------------------

class Tree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.Tree) */ {
 public:
  Tree();
  virtual ~Tree();

  Tree(const Tree& from);

  inline Tree& operator=(const Tree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Tree(Tree&& from) noexcept
    : Tree() {
    *this = ::std::move(from);
  }

  inline Tree& operator=(Tree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Tree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tree* internal_default_instance() {
    return reinterpret_cast<const Tree*>(
               &_Tree_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Tree* other);
  friend void swap(Tree& a, Tree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Tree* New() const PROTOBUF_FINAL { return New(NULL); }

  Tree* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Tree& from);
  void MergeFrom(const Tree& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Tree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_model.LeafValue leaf = 1;
  int leaf_size() const;
  void clear_leaf();
  static const int kLeafFieldNumber = 1;
  const ::proto_model::LeafValue& leaf(int index) const;
  ::proto_model::LeafValue* mutable_leaf(int index);
  ::proto_model::LeafValue* add_leaf();
  ::google::protobuf::RepeatedPtrField< ::proto_model::LeafValue >*
      mutable_leaf();
  const ::google::protobuf::RepeatedPtrField< ::proto_model::LeafValue >&
      leaf() const;

  // repeated .proto_model.Split splits = 2;
  int splits_size() const;
  void clear_splits();
  static const int kSplitsFieldNumber = 2;
  const ::proto_model::Split& splits(int index) const;
  ::proto_model::Split* mutable_splits(int index);
  ::proto_model::Split* add_splits();
  ::google::protobuf::RepeatedPtrField< ::proto_model::Split >*
      mutable_splits();
  const ::google::protobuf::RepeatedPtrField< ::proto_model::Split >&
      splits() const;

  // @@protoc_insertion_point(class_scope:proto_model.Tree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto_model::LeafValue > leaf_;
  ::google::protobuf::RepeatedPtrField< ::proto_model::Split > splits_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsTreeImpl();
};
// -------------------------------------------------------------------

class Bound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.Bound) */ {
 public:
  Bound();
  virtual ~Bound();

  Bound(const Bound& from);

  inline Bound& operator=(const Bound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Bound(Bound&& from) noexcept
    : Bound() {
    *this = ::std::move(from);
  }

  inline Bound& operator=(Bound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bound* internal_default_instance() {
    return reinterpret_cast<const Bound*>(
               &_Bound_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Bound* other);
  friend void swap(Bound& a, Bound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bound* New() const PROTOBUF_FINAL { return New(NULL); }

  Bound* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Bound& from);
  void MergeFrom(const Bound& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Bound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float bound_val = 1;
  int bound_val_size() const;
  void clear_bound_val();
  static const int kBoundValFieldNumber = 1;
  float bound_val(int index) const;
  void set_bound_val(int index, float value);
  void add_bound_val(float value);
  const ::google::protobuf::RepeatedField< float >&
      bound_val() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_bound_val();

  // @@protoc_insertion_point(class_scope:proto_model.Bound)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > bound_val_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsBoundImpl();
};
// -------------------------------------------------------------------

class Model : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_model.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Model* other);
  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const PROTOBUF_FINAL { return New(NULL); }

  Model* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Model* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_model.Tree tree = 1;
  int tree_size() const;
  void clear_tree();
  static const int kTreeFieldNumber = 1;
  const ::proto_model::Tree& tree(int index) const;
  ::proto_model::Tree* mutable_tree(int index);
  ::proto_model::Tree* add_tree();
  ::google::protobuf::RepeatedPtrField< ::proto_model::Tree >*
      mutable_tree();
  const ::google::protobuf::RepeatedPtrField< ::proto_model::Tree >&
      tree() const;

  // repeated .proto_model.Bound feature_bounds = 2;
  int feature_bounds_size() const;
  void clear_feature_bounds();
  static const int kFeatureBoundsFieldNumber = 2;
  const ::proto_model::Bound& feature_bounds(int index) const;
  ::proto_model::Bound* mutable_feature_bounds(int index);
  ::proto_model::Bound* add_feature_bounds();
  ::google::protobuf::RepeatedPtrField< ::proto_model::Bound >*
      mutable_feature_bounds();
  const ::google::protobuf::RepeatedPtrField< ::proto_model::Bound >&
      feature_bounds() const;

  // required float lr = 3;
  bool has_lr() const;
  void clear_lr();
  static const int kLrFieldNumber = 3;
  float lr() const;
  void set_lr(float value);

  // @@protoc_insertion_point(class_scope:proto_model.Model)
 private:
  void set_has_lr();
  void clear_has_lr();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto_model::Tree > tree_;
  ::google::protobuf::RepeatedPtrField< ::proto_model::Bound > feature_bounds_;
  float lr_;
  friend struct ::protobuf_model_2eproto::TableStruct;
  friend void ::protobuf_model_2eproto::InitDefaultsModelImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LeafValue

// required float Value = 1;
inline bool LeafValue::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeafValue::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeafValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeafValue::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float LeafValue::value() const {
  // @@protoc_insertion_point(field_get:proto_model.LeafValue.Value)
  return value_;
}
inline void LeafValue::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto_model.LeafValue.Value)
}

// -------------------------------------------------------------------

// Split

// required int32 feature_id = 1;
inline bool Split::has_feature_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Split::set_has_feature_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Split::clear_has_feature_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Split::clear_feature_id() {
  feature_id_ = 0;
  clear_has_feature_id();
}
inline ::google::protobuf::int32 Split::feature_id() const {
  // @@protoc_insertion_point(field_get:proto_model.Split.feature_id)
  return feature_id_;
}
inline void Split::set_feature_id(::google::protobuf::int32 value) {
  set_has_feature_id();
  feature_id_ = value;
  // @@protoc_insertion_point(field_set:proto_model.Split.feature_id)
}

// required int32 bin_id = 2;
inline bool Split::has_bin_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Split::set_has_bin_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Split::clear_has_bin_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Split::clear_bin_id() {
  bin_id_ = 0;
  clear_has_bin_id();
}
inline ::google::protobuf::int32 Split::bin_id() const {
  // @@protoc_insertion_point(field_get:proto_model.Split.bin_id)
  return bin_id_;
}
inline void Split::set_bin_id(::google::protobuf::int32 value) {
  set_has_bin_id();
  bin_id_ = value;
  // @@protoc_insertion_point(field_set:proto_model.Split.bin_id)
}

// -------------------------------------------------------------------

// Tree

// repeated .proto_model.LeafValue leaf = 1;
inline int Tree::leaf_size() const {
  return leaf_.size();
}
inline void Tree::clear_leaf() {
  leaf_.Clear();
}
inline const ::proto_model::LeafValue& Tree::leaf(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Tree.leaf)
  return leaf_.Get(index);
}
inline ::proto_model::LeafValue* Tree::mutable_leaf(int index) {
  // @@protoc_insertion_point(field_mutable:proto_model.Tree.leaf)
  return leaf_.Mutable(index);
}
inline ::proto_model::LeafValue* Tree::add_leaf() {
  // @@protoc_insertion_point(field_add:proto_model.Tree.leaf)
  return leaf_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto_model::LeafValue >*
Tree::mutable_leaf() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Tree.leaf)
  return &leaf_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_model::LeafValue >&
Tree::leaf() const {
  // @@protoc_insertion_point(field_list:proto_model.Tree.leaf)
  return leaf_;
}

// repeated .proto_model.Split splits = 2;
inline int Tree::splits_size() const {
  return splits_.size();
}
inline void Tree::clear_splits() {
  splits_.Clear();
}
inline const ::proto_model::Split& Tree::splits(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Tree.splits)
  return splits_.Get(index);
}
inline ::proto_model::Split* Tree::mutable_splits(int index) {
  // @@protoc_insertion_point(field_mutable:proto_model.Tree.splits)
  return splits_.Mutable(index);
}
inline ::proto_model::Split* Tree::add_splits() {
  // @@protoc_insertion_point(field_add:proto_model.Tree.splits)
  return splits_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto_model::Split >*
Tree::mutable_splits() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Tree.splits)
  return &splits_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_model::Split >&
Tree::splits() const {
  // @@protoc_insertion_point(field_list:proto_model.Tree.splits)
  return splits_;
}

// -------------------------------------------------------------------

// Bound

// repeated float bound_val = 1;
inline int Bound::bound_val_size() const {
  return bound_val_.size();
}
inline void Bound::clear_bound_val() {
  bound_val_.Clear();
}
inline float Bound::bound_val(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Bound.bound_val)
  return bound_val_.Get(index);
}
inline void Bound::set_bound_val(int index, float value) {
  bound_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_model.Bound.bound_val)
}
inline void Bound::add_bound_val(float value) {
  bound_val_.Add(value);
  // @@protoc_insertion_point(field_add:proto_model.Bound.bound_val)
}
inline const ::google::protobuf::RepeatedField< float >&
Bound::bound_val() const {
  // @@protoc_insertion_point(field_list:proto_model.Bound.bound_val)
  return bound_val_;
}
inline ::google::protobuf::RepeatedField< float >*
Bound::mutable_bound_val() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Bound.bound_val)
  return &bound_val_;
}

// -------------------------------------------------------------------

// Model

// repeated .proto_model.Tree tree = 1;
inline int Model::tree_size() const {
  return tree_.size();
}
inline void Model::clear_tree() {
  tree_.Clear();
}
inline const ::proto_model::Tree& Model::tree(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Model.tree)
  return tree_.Get(index);
}
inline ::proto_model::Tree* Model::mutable_tree(int index) {
  // @@protoc_insertion_point(field_mutable:proto_model.Model.tree)
  return tree_.Mutable(index);
}
inline ::proto_model::Tree* Model::add_tree() {
  // @@protoc_insertion_point(field_add:proto_model.Model.tree)
  return tree_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto_model::Tree >*
Model::mutable_tree() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Model.tree)
  return &tree_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_model::Tree >&
Model::tree() const {
  // @@protoc_insertion_point(field_list:proto_model.Model.tree)
  return tree_;
}

// repeated .proto_model.Bound feature_bounds = 2;
inline int Model::feature_bounds_size() const {
  return feature_bounds_.size();
}
inline void Model::clear_feature_bounds() {
  feature_bounds_.Clear();
}
inline const ::proto_model::Bound& Model::feature_bounds(int index) const {
  // @@protoc_insertion_point(field_get:proto_model.Model.feature_bounds)
  return feature_bounds_.Get(index);
}
inline ::proto_model::Bound* Model::mutable_feature_bounds(int index) {
  // @@protoc_insertion_point(field_mutable:proto_model.Model.feature_bounds)
  return feature_bounds_.Mutable(index);
}
inline ::proto_model::Bound* Model::add_feature_bounds() {
  // @@protoc_insertion_point(field_add:proto_model.Model.feature_bounds)
  return feature_bounds_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto_model::Bound >*
Model::mutable_feature_bounds() {
  // @@protoc_insertion_point(field_mutable_list:proto_model.Model.feature_bounds)
  return &feature_bounds_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_model::Bound >&
Model::feature_bounds() const {
  // @@protoc_insertion_point(field_list:proto_model.Model.feature_bounds)
  return feature_bounds_;
}

// required float lr = 3;
inline bool Model::has_lr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Model::set_has_lr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Model::clear_has_lr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Model::clear_lr() {
  lr_ = 0;
  clear_has_lr();
}
inline float Model::lr() const {
  // @@protoc_insertion_point(field_get:proto_model.Model.lr)
  return lr_;
}
inline void Model::set_lr(float value) {
  set_has_lr();
  lr_ = value;
  // @@protoc_insertion_point(field_set:proto_model.Model.lr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_model

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
