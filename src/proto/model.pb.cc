// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace proto_model {
class TreeNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TreeNode>
      _instance;
} _TreeNode_default_instance_;
class TreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tree>
      _instance;
} _Tree_default_instance_;
class Hash_HashEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Hash_HashEntry_DoNotUse>
      _instance;
} _Hash_HashEntry_DoNotUse_default_instance_;
class HashDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Hash>
      _instance;
} _Hash_default_instance_;
class SplitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Split>
      _instance;
} _Split_default_instance_;
class ModelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Model>
      _instance;
} _Model_default_instance_;
}  // namespace proto_model
namespace protobuf_model_2eproto {
void InitDefaultsTreeNodeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto_model::_TreeNode_default_instance_;
    new (ptr) ::proto_model::TreeNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_model::TreeNode::InitAsDefaultInstance();
}

void InitDefaultsTreeNode() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTreeNodeImpl);
}

void InitDefaultsTreeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_model_2eproto::InitDefaultsTreeNode();
  {
    void* ptr = &::proto_model::_Tree_default_instance_;
    new (ptr) ::proto_model::Tree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_model::Tree::InitAsDefaultInstance();
}

void InitDefaultsTree() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTreeImpl);
}

void InitDefaultsHash_HashEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto_model::_Hash_HashEntry_DoNotUse_default_instance_;
    new (ptr) ::proto_model::Hash_HashEntry_DoNotUse();
  }
  ::proto_model::Hash_HashEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsHash_HashEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHash_HashEntry_DoNotUseImpl);
}

void InitDefaultsHashImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_model_2eproto::InitDefaultsHash_HashEntry_DoNotUse();
  {
    void* ptr = &::proto_model::_Hash_default_instance_;
    new (ptr) ::proto_model::Hash();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_model::Hash::InitAsDefaultInstance();
}

void InitDefaultsHash() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHashImpl);
}

void InitDefaultsSplitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::proto_model::_Split_default_instance_;
    new (ptr) ::proto_model::Split();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_model::Split::InitAsDefaultInstance();
}

void InitDefaultsSplit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSplitImpl);
}

void InitDefaultsModelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_model_2eproto::InitDefaultsTree();
  protobuf_model_2eproto::InitDefaultsHash();
  protobuf_model_2eproto::InitDefaultsSplit();
  {
    void* ptr = &::proto_model::_Model_default_instance_;
    new (ptr) ::proto_model::Model();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto_model::Model::InitAsDefaultInstance();
}

void InitDefaultsModel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsModelImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::TreeNode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::TreeNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::TreeNode, featureid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::TreeNode, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::TreeNode, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::TreeNode, leaf_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::TreeNode, value_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Tree, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Tree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Tree, node_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Hash_HashEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Hash_HashEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Hash_HashEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Hash_HashEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Hash, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Hash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Hash, hash_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Split, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Split, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Split, split_val_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Model, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Model, tree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Model, hashes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Model, splits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::proto_model::Model, lr_),
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::proto_model::TreeNode)},
  { 15, 21, sizeof(::proto_model::Tree)},
  { 22, 29, sizeof(::proto_model::Hash_HashEntry_DoNotUse)},
  { 31, 37, sizeof(::proto_model::Hash)},
  { 38, 44, sizeof(::proto_model::Split)},
  { 45, 54, sizeof(::proto_model::Model)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto_model::_TreeNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto_model::_Tree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto_model::_Hash_HashEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto_model::_Hash_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto_model::_Split_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto_model::_Model_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "model.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013model.proto\022\013proto_model\"W\n\010TreeNode\022\021"
      "\n\tFeatureId\030\001 \002(\005\022\014\n\004Left\030\002 \002(\005\022\r\n\005Right"
      "\030\003 \002(\005\022\014\n\004Leaf\030\004 \002(\010\022\r\n\005Value\030\005 \002(\002\"+\n\004T"
      "ree\022#\n\004node\030\001 \003(\0132\025.proto_model.TreeNode"
      "\"^\n\004Hash\022)\n\004hash\030\001 \003(\0132\033.proto_model.Has"
      "h.HashEntry\032+\n\tHashEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
      "\005value\030\002 \001(\005:\0028\001\"\032\n\005Split\022\021\n\tsplit_val\030\001"
      " \003(\002\"{\n\005Model\022\037\n\004tree\030\001 \003(\0132\021.proto_mode"
      "l.Tree\022!\n\006hashes\030\002 \003(\0132\021.proto_model.Has"
      "h\022\"\n\006splits\030\003 \003(\0132\022.proto_model.Split\022\n\n"
      "\002lr\030\004 \002(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 409);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_model_2eproto
namespace proto_model {

// ===================================================================

void TreeNode::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeNode::kFeatureIdFieldNumber;
const int TreeNode::kLeftFieldNumber;
const int TreeNode::kRightFieldNumber;
const int TreeNode::kLeafFieldNumber;
const int TreeNode::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeNode::TreeNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_model_2eproto::InitDefaultsTreeNode();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_model.TreeNode)
}
TreeNode::TreeNode(const TreeNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&featureid_, &from.featureid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&featureid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto_model.TreeNode)
}

void TreeNode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&featureid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&featureid_)) + sizeof(value_));
}

TreeNode::~TreeNode() {
  // @@protoc_insertion_point(destructor:proto_model.TreeNode)
  SharedDtor();
}

void TreeNode::SharedDtor() {
}

void TreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeNode::descriptor() {
  ::protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TreeNode& TreeNode::default_instance() {
  ::protobuf_model_2eproto::InitDefaultsTreeNode();
  return *internal_default_instance();
}

TreeNode* TreeNode::New(::google::protobuf::Arena* arena) const {
  TreeNode* n = new TreeNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TreeNode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_model.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&featureid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&featureid_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_model.TreeNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FeatureId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_featureid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &featureid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 Right = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool Leaf = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_leaf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leaf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float Value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_model.TreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_model.TreeNode)
  return false;
#undef DO_
}

void TreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_model.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 FeatureId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->featureid(), output);
  }

  // required int32 Left = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left(), output);
  }

  // required int32 Right = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->right(), output);
  }

  // required bool Leaf = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->leaf(), output);
  }

  // required float Value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_model.TreeNode)
}

::google::protobuf::uint8* TreeNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto_model.TreeNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 FeatureId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->featureid(), target);
  }

  // required int32 Left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left(), target);
  }

  // required int32 Right = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->right(), target);
  }

  // required bool Leaf = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->leaf(), target);
  }

  // required float Value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_model.TreeNode)
  return target;
}

size_t TreeNode::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto_model.TreeNode)
  size_t total_size = 0;

  if (has_featureid()) {
    // required int32 FeatureId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->featureid());
  }

  if (has_left()) {
    // required int32 Left = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  if (has_right()) {
    // required int32 Right = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right());
  }

  if (has_leaf()) {
    // required bool Leaf = 4;
    total_size += 1 + 1;
  }

  if (has_value()) {
    // required float Value = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TreeNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_model.TreeNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 FeatureId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->featureid());

    // required int32 Left = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());

    // required int32 Right = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right());

    // required bool Leaf = 4;
    total_size += 1 + 1;

    // required float Value = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_model.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  const TreeNode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_model.TreeNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_model.TreeNode)
    MergeFrom(*source);
  }
}

void TreeNode::MergeFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_model.TreeNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      featureid_ = from.featureid_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000004u) {
      right_ = from.right_;
    }
    if (cached_has_bits & 0x00000008u) {
      leaf_ = from.leaf_;
    }
    if (cached_has_bits & 0x00000010u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TreeNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_model.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeNode::CopyFrom(const TreeNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_model.TreeNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void TreeNode::Swap(TreeNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TreeNode::InternalSwap(TreeNode* other) {
  using std::swap;
  swap(featureid_, other->featureid_);
  swap(left_, other->left_);
  swap(right_, other->right_);
  swap(leaf_, other->leaf_);
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeNode::GetMetadata() const {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tree::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tree::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tree::Tree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_model_2eproto::InitDefaultsTree();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_model.Tree)
}
Tree::Tree(const Tree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      node_(from.node_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto_model.Tree)
}

void Tree::SharedCtor() {
  _cached_size_ = 0;
}

Tree::~Tree() {
  // @@protoc_insertion_point(destructor:proto_model.Tree)
  SharedDtor();
}

void Tree::SharedDtor() {
}

void Tree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tree::descriptor() {
  ::protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tree& Tree::default_instance() {
  ::protobuf_model_2eproto::InitDefaultsTree();
  return *internal_default_instance();
}

Tree* Tree::New(::google::protobuf::Arena* arena) const {
  Tree* n = new Tree;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Tree::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_model.Tree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Tree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_model.Tree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_model.TreeNode node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_model.Tree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_model.Tree)
  return false;
#undef DO_
}

void Tree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_model.Tree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_model.TreeNode node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_model.Tree)
}

::google::protobuf::uint8* Tree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto_model.Tree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_model.TreeNode node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_model.Tree)
  return target;
}

size_t Tree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_model.Tree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .proto_model.TreeNode node = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_model.Tree)
  GOOGLE_DCHECK_NE(&from, this);
  const Tree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_model.Tree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_model.Tree)
    MergeFrom(*source);
  }
}

void Tree::MergeFrom(const Tree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_model.Tree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
}

void Tree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_model.Tree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tree::CopyFrom(const Tree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_model.Tree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tree::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->node())) return false;
  return true;
}

void Tree::Swap(Tree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tree::InternalSwap(Tree* other) {
  using std::swap;
  node_.InternalSwap(&other->node_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Tree::GetMetadata() const {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Hash_HashEntry_DoNotUse::Hash_HashEntry_DoNotUse() {}
Hash_HashEntry_DoNotUse::Hash_HashEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Hash_HashEntry_DoNotUse::MergeFrom(const Hash_HashEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Hash_HashEntry_DoNotUse::GetMetadata() const {
  ::protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[2];
}
void Hash_HashEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Hash::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hash::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hash::Hash()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_model_2eproto::InitDefaultsHash();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_model.Hash)
}
Hash::Hash(const Hash& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.MergeFrom(from.hash_);
  // @@protoc_insertion_point(copy_constructor:proto_model.Hash)
}

void Hash::SharedCtor() {
  _cached_size_ = 0;
}

Hash::~Hash() {
  // @@protoc_insertion_point(destructor:proto_model.Hash)
  SharedDtor();
}

void Hash::SharedDtor() {
}

void Hash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hash::descriptor() {
  ::protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Hash& Hash::default_instance() {
  ::protobuf_model_2eproto::InitDefaultsHash();
  return *internal_default_instance();
}

Hash* Hash::New(::google::protobuf::Arena* arena) const {
  Hash* n = new Hash;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hash::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_model.Hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Hash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_model.Hash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, int32> hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          Hash_HashEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Hash_HashEntry_DoNotUse,
              ::std::string, ::google::protobuf::int32,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 > > parser(&hash_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto_model.Hash.HashEntry.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_model.Hash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_model.Hash)
  return false;
#undef DO_
}

void Hash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_model.Hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> hash = 1;
  if (!this->hash().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "proto_model.Hash.HashEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->hash().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hash().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->hash().begin();
          it != this->hash().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Hash_HashEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hash_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Hash_HashEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->hash().begin();
          it != this->hash().end(); ++it) {
        entry.reset(hash_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_model.Hash)
}

::google::protobuf::uint8* Hash::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto_model.Hash)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> hash = 1;
  if (!this->hash().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormat::SERIALIZE,
          "proto_model.Hash.HashEntry.key");
      }
    };

    if (deterministic &&
        this->hash().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hash().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->hash().begin();
          it != this->hash().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Hash_HashEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hash_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Hash_HashEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
          it = this->hash().begin();
          it != this->hash().end(); ++it) {
        entry.reset(hash_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_model.Hash)
  return target;
}

size_t Hash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_model.Hash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // map<string, int32> hash = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hash_size());
  {
    ::google::protobuf::scoped_ptr<Hash_HashEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >::const_iterator
        it = this->hash().begin();
        it != this->hash().end(); ++it) {
      entry.reset(hash_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hash::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_model.Hash)
  GOOGLE_DCHECK_NE(&from, this);
  const Hash* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Hash>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_model.Hash)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_model.Hash)
    MergeFrom(*source);
  }
}

void Hash::MergeFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_model.Hash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hash_.MergeFrom(from.hash_);
}

void Hash::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_model.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hash::CopyFrom(const Hash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_model.Hash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hash::IsInitialized() const {
  return true;
}

void Hash::Swap(Hash* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hash::InternalSwap(Hash* other) {
  using std::swap;
  hash_.Swap(&other->hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hash::GetMetadata() const {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Split::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Split::kSplitValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Split::Split()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_model_2eproto::InitDefaultsSplit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_model.Split)
}
Split::Split(const Split& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      split_val_(from.split_val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto_model.Split)
}

void Split::SharedCtor() {
  _cached_size_ = 0;
}

Split::~Split() {
  // @@protoc_insertion_point(destructor:proto_model.Split)
  SharedDtor();
}

void Split::SharedDtor() {
}

void Split::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Split::descriptor() {
  ::protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Split& Split::default_instance() {
  ::protobuf_model_2eproto::InitDefaultsSplit();
  return *internal_default_instance();
}

Split* Split::New(::google::protobuf::Arena* arena) const {
  Split* n = new Split;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Split::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_model.Split)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  split_val_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Split::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_model.Split)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float split_val = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_split_val())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_split_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_model.Split)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_model.Split)
  return false;
#undef DO_
}

void Split::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_model.Split)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float split_val = 1;
  for (int i = 0, n = this->split_val_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->split_val(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_model.Split)
}

::google::protobuf::uint8* Split::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto_model.Split)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float split_val = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(1, this->split_val_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_model.Split)
  return target;
}

size_t Split::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_model.Split)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated float split_val = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->split_val_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->split_val_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Split::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_model.Split)
  GOOGLE_DCHECK_NE(&from, this);
  const Split* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Split>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_model.Split)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_model.Split)
    MergeFrom(*source);
  }
}

void Split::MergeFrom(const Split& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_model.Split)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  split_val_.MergeFrom(from.split_val_);
}

void Split::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_model.Split)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Split::CopyFrom(const Split& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_model.Split)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Split::IsInitialized() const {
  return true;
}

void Split::Swap(Split* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Split::InternalSwap(Split* other) {
  using std::swap;
  split_val_.InternalSwap(&other->split_val_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Split::GetMetadata() const {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Model::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kTreeFieldNumber;
const int Model::kHashesFieldNumber;
const int Model::kSplitsFieldNumber;
const int Model::kLrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_model_2eproto::InitDefaultsModel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto_model.Model)
}
Model::Model(const Model& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tree_(from.tree_),
      hashes_(from.hashes_),
      splits_(from.splits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lr_ = from.lr_;
  // @@protoc_insertion_point(copy_constructor:proto_model.Model)
}

void Model::SharedCtor() {
  _cached_size_ = 0;
  lr_ = 0;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:proto_model.Model)
  SharedDtor();
}

void Model::SharedDtor() {
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  ::protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Model& Model::default_instance() {
  ::protobuf_model_2eproto::InitDefaultsModel();
  return *internal_default_instance();
}

Model* Model::New(::google::protobuf::Arena* arena) const {
  Model* n = new Model;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_model.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tree_.Clear();
  hashes_.Clear();
  splits_.Clear();
  lr_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto_model.Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_model.Tree tree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_tree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto_model.Hash hashes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_hashes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto_model.Split splits = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_splits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float lr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_lr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto_model.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto_model.Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto_model.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_model.Tree tree = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tree(static_cast<int>(i)), output);
  }

  // repeated .proto_model.Hash hashes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hashes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hashes(static_cast<int>(i)), output);
  }

  // repeated .proto_model.Split splits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->splits_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->splits(static_cast<int>(i)), output);
  }

  cached_has_bits = _has_bits_[0];
  // required float lr = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto_model.Model)
}

::google::protobuf::uint8* Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto_model.Model)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_model.Tree tree = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tree_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->tree(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto_model.Hash hashes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hashes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->hashes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto_model.Split splits = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->splits_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->splits(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required float lr = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_model.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_model.Model)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float lr = 4;
  if (has_lr()) {
    total_size += 1 + 4;
  }
  // repeated .proto_model.Tree tree = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->tree_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tree(static_cast<int>(i)));
    }
  }

  // repeated .proto_model.Hash hashes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->hashes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->hashes(static_cast<int>(i)));
    }
  }

  // repeated .proto_model.Split splits = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->splits_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->splits(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto_model.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto_model.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto_model.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto_model.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tree_.MergeFrom(from.tree_);
  hashes_.MergeFrom(from.hashes_);
  splits_.MergeFrom(from.splits_);
  if (from.has_lr()) {
    set_lr(from.lr());
  }
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto_model.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_model.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tree())) return false;
  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  using std::swap;
  tree_.InternalSwap(&other->tree_);
  hashes_.InternalSwap(&other->hashes_);
  splits_.InternalSwap(&other->splits_);
  swap(lr_, other->lr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_model_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_model_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_model

// @@protoc_insertion_point(global_scope)
